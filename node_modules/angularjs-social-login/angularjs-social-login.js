"use strict";

var socialLogin = angular.module('socialLogin', []);

socialLogin.provider("social", function () {
    var fbKey, fbApiV, googleKey, linkedInKey;
    return {
        setFbKey: function (obj) {
            fbKey = obj.appId;
            fbApiV = obj.apiVersion;
            var d = document, fbJs, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            fbJs = d.createElement('script');
            fbJs.id = id;
            fbJs.async = true;
            fbJs.src = "//connect.facebook.net/en_US/sdk.js";

            fbJs.onload = function () {
                FB.init({
                    appId: fbKey,
                    status: true,
                    cookie: true,
                    xfbml: true,
                    version: fbApiV
                });
            };

            ref.parentNode.insertBefore(fbJs, ref);
        },
        setGoogleKey: function (value) {
            googleKey = value;
            var d = document, gJs, ref = d.getElementsByTagName('script')[0];
            gJs = d.createElement('script');
            gJs.async = true;
            gJs.src = "//apis.google.com/js/platform.js"

            gJs.onload = function () {
                var params = {
                    client_id: value,
                    scope: 'email'
                }
                gapi.load('auth2', function () {
                    gapi.auth2.init(params);
                });
            };

            ref.parentNode.insertBefore(gJs, ref);
        },
        setLinkedInKey: function (value) {
            linkedInKey = value;
            var lIN, d = document, ref = d.getElementsByTagName('script')[0];
            lIN = d.createElement('script');
            lIN.async = false;
            lIN.src = "//platform.linkedin.com/in.js";
            lIN.text = ("api_key: " + linkedInKey).replace("\"", "");
            ref.parentNode.insertBefore(lIN, ref);
        },
        $get: function () {
            return{
                fbKey: fbKey,
                googleKey: googleKey,
                linkedInKey: linkedInKey,
                fbApiV: fbApiV
            }
        }
    }
});

socialLogin.factory("socialLoginService", function ($window, $rootScope) {
    return {
        logout: function () {
            var provider = $window.localStorage.getItem('_login_provider');
            switch (provider) {
                case "google":
                    //its a hack need to find better solution.
                    var gElement = document.getElementById("gSignout");
                    if (typeof (gElement) != 'undefined' && gElement != null) {
                        gElement.remove();
                    }
                    var d = document, gSignout, ref = d.getElementsByTagName('script')[0];
                    gSignout = d.createElement('script');
                    gSignout.src = "https://accounts.google.com/Logout";
                    gSignout.type = "text/javascript";
                    gSignout.id = "gSignout";
                    $window.localStorage.removeItem('_login_provider');
                    $rootScope.$broadcast('event:social-sign-out-success', "success");
                    ref.parentNode.insertBefore(gSignout, ref);
                    break;
                case "linkedIn":
                    IN.User.logout(function () {
                        $window.localStorage.removeItem('_login_provider');
                        $rootScope.$broadcast('event:social-sign-out-success', "success");
                    }, {});
                    break;
                case "facebook":
                    FB.logout(function (res) {
                        $window.localStorage.removeItem('_login_provider');
                        $rootScope.$broadcast('event:social-sign-out-success', "success");
                    });
                    break;
            }
        },
        setProvider: function (provider) {
            $window.localStorage.setItem('_login_provider', provider);
        }
    };
});

socialLogin.directive("linkedIn", function ($rootScope, social, socialLoginService, $window, $injector, ModalService) {
    return {
        restrict: 'EA',
        controller: function ($scope, $element) {
            $rootScope.$on('event:social-sign-in-success', function (event, userDetails) {
                $scope.live_data = userDetails;
                $scope.role_type = [{id: 2, name: "Employer"}, {id: 3, name: "Professional"}];
                if (userDetails.provider == "facebook") {
                    $scope.request = {social_id: userDetails.uid, email: userDetails.email, register_type: "facebook", data_type: 1};
                } else {
                    $scope.request = {social_id: userDetails.social_id, email: userDetails.email, register_type: "linkedin", data_type: 1};
                }
                var userService = $injector.get('userService');
                userService.socialcheck($scope.request, function (response) {
                    if (response.data.status == 200) {
                        $injector.get('$state').transitionTo('employer_profile');
                    } else {
                        if (userDetails.provider == "facebook") {
                            $scope.registerFacebookinUser(userDetails);
                        } else {
                            $scope.registerLinkedinUser(userDetails);
                        }
                    }
                });
            });

            $scope.registerLinkedinUser = function (userDetails) {
                //opens popup after clicking social login
                ModalService.showModal({
                    templateUrl: 'views/frontend/elements/modals/social_usertype.html',
                    controller: function () {
                        $scope.saveUser = function () {
                            $scope.request = {role_id: $scope.live_data.user_type, social_id: userDetails.social_id, first_name: userDetails.first_name, last_name: userDetails.last_name, email: $scope.live_data.email, data_type: 1, register_type: userDetails.register_type};
                            var commonService = $injector.get('commonService');
                            var userService = $injector.get('userService');
                            commonService.loadingPopup();
                            userService.socialsignup($scope.request, function (response) {
                                if (response.data.status == 200) {
                                    var data = {title: "Success!", text: response.data.message, type: 'success', confirmButtonText: "OK"};
                                    commonService.showMessage(data);
                                    $scope.live_data = null; //empty $scope.use data from form
                                    $scope.submitted = false;
                                    $scope.isDisabled = false;
                                    angular.element(".modal-backdrop").remove();
                                    angular.element("body").removeClass("modal-open");
                                    $injector.get('$state').transitionTo('employer_profile');
                                } else {
                                    var data = {title: 'oops', text: response.data.message, type: 'error'};
                                    commonService.showMessage(data);
                                    $scope.submitted = false;
                                    $scope.isDisabled = false;
                                }
                            });
                        };
                    },
                    scope: $scope
                }).then(function (modal) {
                    modal.element.modal();
                });
            };

            $scope.registerFacebookinUser = function (userDetails) {
                //opens popup after clicking social login
                ModalService.showModal({
                    templateUrl: 'views/frontend/elements/modals/social_usertype.html',
                    controller: function () {
                        $scope.saveUser = function () {
                            $scope.request = {role_id: $scope.live_data.user_type, social_id: userDetails.uid, first_name: userDetails.name, last_name: "", email: $scope.live_data.email, data_type: 1, register_type: userDetails.provider};
                            var commonService = $injector.get('commonService');
                            var userService = $injector.get('userService');
                            commonService.loadingPopup();
                            userService.socialsignup($scope.request, function (response) {
                                if (response.data.status == 200) {
                                    var data = {title: "Success!", text: response.data.message, type: 'success', confirmButtonText: "OK"};
                                    commonService.showMessage(data);
                                    // $scope.live_data = null; //empty $scope.live_data
                                    $scope.submitted = false;
                                    $scope.isDisabled = false;
                                    angular.element(".modal-backdrop").remove();
                                    angular.element("body").removeClass("modal-open");
                                    $injector.get('$state').transitionTo('employer_profile');
                                } else {
                                    var data = {title: 'oops', text: response.data.message, type: 'error'};
                                    commonService.showMessage(data);
                                    $scope.submitted = false;
                                    $scope.isDisabled = false;
                                }
                            });
                        };
                    },
                    scope: $scope
                }).then(function (modal) {
                    modal.element.modal();
                });
            };
        },
        link: function (scope, ele, attr) {
            ele.on("click", function () {
                IN.User.authorize(function () {
                    IN.API.Raw("/people/~:(id,first-name,last-name,email-address,picture-url)").result(function (res) {
                        socialLoginService.setProvider("linkedIn");
                        var userDetails = {first_name: res.firstName, last_name: res.lastName, email: res.emailAddress, social_id: res.id, register_type: "linkedin", profile_image: res.pictureUrl, data_type: 1};
                        $rootScope.$broadcast('event:social-sign-in-success', userDetails);
                    });
                });
            });
        }
    };
});

socialLogin.directive("gLogin", function ($rootScope, social, socialLoginService) {
    return {
        restrict: 'EA',
        scope: {},
        replace: true,
        link: function (scope, ele, attr) {
            ele.on('click', function () {
                var fetchUserDetails = function () {
                    var currentUser = scope.gauth.currentUser.get();
                    var profile = currentUser.getBasicProfile();
                    var idToken = currentUser.getAuthResponse().id_token;
                    return {
                        token: idToken,
                        name: profile.getName(),
                        email: profile.getEmail(),
                        uid: profile.getId(),
                        provider: "google",
                        imageUrl: profile.getImageUrl()
                    };
                };
                if (typeof (scope.gauth) == "undefined")
                    scope.gauth = gapi.auth2.getAuthInstance();
                if (!scope.gauth.isSignedIn.get()) {
                    scope.gauth.signIn().then(function (googleUser) {
                        socialLoginService.setProvider("google");
                        $rootScope.$broadcast('event:social-sign-in-success', fetchUserDetails());
                    }, function (err) {
                        console.log(err);
                    });
                } else {
                    socialLoginService.setProvider("google");
                    $rootScope.$broadcast('event:social-sign-in-success', fetchUserDetails());
                }

            });
        }
    };
});

socialLogin.directive("fbLogin", function ($rootScope, social, socialLoginService, $q) {
    return {
        restrict: 'EA',
        controller: function ($scope, $element) {
            $rootScope.$on('event:social-sign-in-success', function (event, userDetails) {
            });
        },
        scope: {},
        replace: true,
        link: function (scope, ele, attr) {
            ele.on('click', function () {
                var fetchUserDetails = function () {
                    var deferred = $q.defer();
                    FB.api('/me?fields=name,email,picture', function (res) {
                        if (!res || res.error) {
                            deferred.reject('Error occured while fetching user details.');
                        } else {
                            deferred.resolve({
                                name: res.name,
                                email: res.email,
                                uid: res.id,
                                provider: "facebook",
                                imageUrl: res.picture.data.url
                            });
                        }
                    });
                    return deferred.promise;
                }
                FB.getLoginStatus(function (response) {
                    if (response.status === "connected") {
                        fetchUserDetails().then(function (userDetails) {
                            userDetails["token"] = response.authResponse.accessToken;
                            socialLoginService.setProvider("facebook");
                            $rootScope.$broadcast('event:social-sign-in-success', userDetails);
                        });
                    } else {
                        FB.login(function (response) {
                            if (response.status === "connected") {
                                fetchUserDetails().then(function (userDetails) {
                                    userDetails["token"] = response.authResponse.accessToken;
                                    socialLoginService.setProvider("facebook");
                                    $rootScope.$broadcast('event:social-sign-in-success', userDetails);
                                });
                            }
                        }, {scope: 'email', auth_type: 'rerequest'});
                    }
                });
            });
        }
    };
});
