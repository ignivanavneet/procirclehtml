{
  "name": "angular-jwt",
  "version": "0.1.8",
  "description": "Library to help you work with JWTs on AngularJS",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Martin Gontovnikas",
    "email": "martin@gon.to"
  },
  "scripts": {
    "test": "gulp test-src"
  },
  "dependencies": {},
  "devDependencies": {
    "karma-mocha-reporter": "^0.3.1",
    "chai": "^1.9.1",
    "chai-jquery": "^1.2.3",
    "gulp": "^3.8.7",
    "gulp-concat": "^2.3.4",
    "gulp-inject-string": "^1.1.0",
    "gulp-ng-annotate": "^0.3.3",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^0.3.1",
    "karma": "^0.12.22",
    "karma-chai": "^0.1.0",
    "karma-chai-jquery": "^1.0.0",
    "karma-chrome-launcher": "^0.1.4",
    "karma-jasmine": "^0.1.5",
    "karma-jquery": "^0.1.0",
    "karma-mocha": "^0.1.8",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-sinon-chai": "^0.2.0",
    "mocha": "^1.21.4",
    "sinon": "^1.10.3",
    "sinon-chai": "^2.5.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "# angular-jwt\n\nThis library will help you work with [JWTs](http://jwt.io/).\n\n## Key Features\n\n* **Decode a JWT** from your AngularJS app\n* Check the **expiration date** of the JWT\n* Automatically **send the JWT in every request** made to the server\n* Manage the user's authentication state with **authManager**\n\n## Installing it\n\nYou have several options: Install with either bower or npm and link to the installed file from html using script tag.\n\n```bash\nbower install angular-jwt\n```\n\n```bash\nnpm install angular-jwt\n```\n\n## jwtHelper\n\njwtHelper will take care of helping you decode the token and check its expiration date.\n\n### Decoding the Token\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .controller('Controller', function Controller(jwtHelper) {\n    var expToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NhbXBsZXMuYXV0aDAuY29tLyIsInN1YiI6ImZhY2Vib29rfDEwMTU0Mjg3MDI3NTEwMzAyIiwiYXVkIjoiQlVJSlNXOXg2MHNJSEJ3OEtkOUVtQ2JqOGVESUZ4REMiLCJleHAiOjE0MTIyMzQ3MzAsImlhdCI6MTQxMjE5ODczMH0.7M5sAV50fF1-_h9qVbdSgqAnXVF7mz3I6RjS6JiH0H8';  \n\n    var tokenPayload = jwtHelper.decodeToken(expToken);\n  });\n```\n### Getting the Token Expiration Date\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .controller('Controller', function Controller(jwtHelper) {\n    var date = jwtHelper.getTokenExpirationDate(expToken);\n  });\n```\n\n### Checking if the Token is Expired\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .controller('Controller', function Controller(jwtHelper) {\n    var bool = jwtHelper.isTokenExpired(expToken);\n  });\n```\n\n### More Examples\n\nYou can see some more examples of how this works in [the tests](https://github.com/auth0/angular-jwt/blob/master/test/unit/angularJwt/services/jwtSpec.js)\n\n## jwtInterceptor\n\nJWT interceptor will take care of sending the JWT in every request.\n\n### Basic Usage\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    // Please note we're annotating the function so that the $injector works when the file is minified\n    jwtOptionsProvider.config({\n      tokenGetter: ['myService', function(myService) {\n        myService.doSomething();\n        return localStorage.getItem('id_token');\n      }]\n    });\n\n    $httpProvider.interceptors.push('jwtInterceptor');\n  })\n  .controller('Controller', function Controller($http) {\n    // If localStorage contains the id_token it will be sent in the request\n    // Authorization: Bearer [yourToken] will be sent\n    $http({\n      url: '/hola',\n      method: 'GET'\n    });\n  });\n```\n\n### Not Sending the JWT for Specific Requests\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    // Please note we're annotating the function so that the $injector works when the file is minified\n    jwtOptionsProvider.config({\n      tokenGetter: ['myService', function(myService) {\n        myService.doSomething();\n        return localStorage.getItem('id_token');\n      }]\n    });\n\n    $httpProvider.interceptors.push('jwtInterceptor');\n  })\n  .controller('Controller', function Controller($http) {\n    // This request will NOT send the token as it has skipAuthorization\n    $http({\n      url: '/hola',\n      skipAuthorization: true,\n      method: 'GET'\n    });\n  });\n```\n\n### Whitelisting Domains\n\nIf you are calling an API that is on a domain other than your application's origin, you will need to whitelist it.\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    jwtOptionsProvider.config({\n\n      ...\n\n      whiteListedDomains: ['api.myapp.com', 'localhost']\n    });\n  });\n```\n\nNote that you only need to provide the domain. Protocols (ex: `http://`) and port numbers should be omitted. \n\n### Not Sending the JWT for Template Requests\n\nThe `tokenGetter` method can have a parameter `options` injected by angular-jwt. This parameter is the options object of the current request.\n\nBy default the interceptor will send the JWT for all HTTP requests. This includes any `ng-include` directives or\n`templateUrls` defined in a `state` in the `stateProvider`. If you want to avoid sending the JWT for these requests you\nshould adapt your `tokenGetter` method to fit your needs. For example:\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    jwtOptionsProvider.config({\n      tokenGetter: ['options', function(options) {\n        // Skip authentication for any requests ending in .html\n        if (options.url.substr(options.url.length - 5) == '.html') {\n          return null;\n        }\n\n        return localStorage.getItem('id_token');\n      }]\n    });\n\n    $httpProvider.interceptors.push('jwtInterceptor');\n  });\n```\n\n### Sending Different Tokens Based on URLs\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    jwtOptionsProvider.config({\n      tokenGetter: ['options', function(options) {\n        if (options.url.indexOf('http://auth0.com') === 0) {\n          return localStorage.getItem('auth0.id_token');\n        } else {\n          return localStorage.getItem('id_token');\n        }\n      }]\n    });\n    $httpProvider.interceptors.push('jwtInterceptor');\n  })\n  .controller('Controller', function Controller($http) {\n    // This request will send the auth0.id_token since URL matches\n    $http({\n      url: 'http://auth0.com/hola',\n      skipAuthorization: true,\n      method: 'GET'\n    });\n  });\n```\n\n## Managing Authentication state with `authManager`\n\nAlmost all applications that implement authentication need some indication of whether the user is authenticated or not and the **authManager** service provides a way to do this. Typical cases include conditionally showing and hiding different parts of the UI, checking whether the user is authenticated when the page is refreshed, and restricting routes to authenticated users.\n\n```html\n  <button ng-if=\"!isAuthenticated\">Log In</button>\n  <button ng-if=\"isAuthenticated\">Log Out</button>\n```\n\n### Getting Authentication State on Page Refresh\n\nThe authentication state that is set after login will only be good as long as the user doesn't refresh their page. If the page is refreshed, or the browser closed and reopened, the state will be lost. To check whether the user is actually authenticated when the page is refreshed, use the `checkAuthOnRefresh` method in the application's `run` block.\n\n```js\nangular\n  .module('app')\n  .run(function(authManager) {\n\n    authManager.checkAuthOnRefresh();\n\n  });\n```\n\n**Note:** If your `tokenGetter` relies on request `options`, be mindful that `checkAuthOnRefresh()` will pass `null` as `options` since the call happens in the run phase of the Angular lifecycle and no requests are fired through the Angular app. If you are using requestion `options`, check that `options` isn't `null` in your `tokenGetter` function:\n\n```js\n...\n\ntokenGetter: ['options', function (options) {\n  if (options && options.url.substr(options.url.length - 5) == '.html') {\n    return null;\n  }\n  return localStorage.getItem('id_token');\n}],\n\n...\n```\n\n#### Responding to an Expired Token on Page Refresh\n\nIf the user is holding an expired JWT when the page is refreshed, the action that is taken is at your discretion. You may use the `tokenHasExpired` event to listen for expired tokens on page refresh and respond however you like.\n\n```js\n// app.run.js\n\n...\n\n$rootScope.$on('tokenHasExpired', function() {\n  alert('Your session has expired!');\n});\n\n```\n### Limiting Access to Routes\n\nAccess to various client-side routes can be limited to users who have an unexpired JWT, which is an indication that they are authenticated. Use `requiresLogin: true` on whichever routes you want to protect.\n\n```js\n...\n\n.state('ping', {\n  url: '/ping',\n  controller: 'PingController',\n  templateUrl: 'components/ping/ping.html',\n  controllerAs: 'vm',\n  data: {\n    requiresLogin: true\n  }\n});\n\n...\n```\n\n> **Note:** Protecting a route on the client side offers no guarantee that a savvy user won't be able to hack their way to that route. In fact, this could be done simply if the user alters the expiry time in their JWT with a tool like [jwt.io](https://jwt.io). Always ensure that sensitive data is kept off the client side and is protected on the server. \n\n### Redirecting the User On Unauthorized Requests\n\nWhen the user's JWT expires and they attempt a call to a secured endpoint, a 401 - Unauthorized response will be returned. In these cases you will likely want to redirect the user back to the page/state used for authentication so they can log in again. This can be done with the `redirectWhenUnauthenticated` method in the application's `run` block.\n\n```js\nangular\n  .module('app')\n  .run(function(authManager) {\n\n    ...\n\n    authManager.redirectWhenUnauthenticated();\n\n  });\n```\n\n### Configuring the Login State\n\nThe page/state to send the user to when they are redirected because of an unauthorized request can be configured with `jwtOptionsProvider`.\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    jwtOptionsProvider.config({\n      unauthenticatedRedirectPath: '/login'\n    });\n  });\n```\n\n### Configuring the Unauthenticated Redirector\n\nIf you would like to control the behavior of the redirection that happens when users become unauthenticated, you can configure `jwtOptionsProvider` with a custom function.\n\n```js\nangular\n  .module('app', ['angular-jwt'])\n  .config(function Config($httpProvider, jwtOptionsProvider) {\n    jwtOptionsProvider.config({\n      unauthenticatedRedirector: ['$state', function($state) {\n        $state.go('app.login');\n      }]\n    });\n  });\n```\n\n### Sending the token as a URL Param\n\n```js\nangular.module('app', ['angular-jwt'])\n.config(function Config($httpProvider, jwtOptionsProvider) {\n  jwtOptionsProvider.config({\n    urlParam: 'access_token',\n    tokenGetter: ['myService', function(myService) {\n      myService.doSomething();\n      return localStorage.getItem('id_token');\n    }]\n  });\n\n  $httpProvider.interceptors.push('jwtInterceptor');\n})\n.controller('Controller', function Controller($http) {\n  // If localStorage contains the id_token it will be sent in the request\n  // url will contain access_token=[yourToken]\n  $http({\n    url: '/hola',\n    method: 'GET'\n  });\n})\n```\n\n### More examples\n\nYou can see some more examples of how this works in [the tests](https://github.com/auth0/angular-jwt/blob/master/test/unit/angularJwt/services/interceptorSpec.js)\n\n## FAQ\n\n### I have minification problems with angular-jwt in production. What's going on?\n\nWhen you're using the `tokenGetter` function, it's then called with the injector. `ngAnnotate` doesn't automatically detect that this function receives services as parameters, therefore you must either annotate this method for `ngAnnotate` to know, or use it like follows:\n\n```js\njwtOptionsProvider({\n  tokenGetter: ['store', '$http', function(store, $http) {\n    ...\n  }]\n});\n```\n\n## Usages\n\nThis library is used in [auth0-angular](https://github.com/auth0/auth0-angular) and [angular-lock](https://github.com/auth0/angular-lock).\n\n## Contributing\n\nJust clone the repo, run `npm install`, `bower install` and then `gulp` to work :).\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## What is Auth0?\n\nAuth0 helps you to:\n\n* Add authentication with [multiple authentication sources](https://docs.auth0.com/identityproviders), either social like **Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, Salesforce, amont others**, or enterprise identity systems like **Windows Azure AD, Google Apps, Active Directory, ADFS or any SAML Identity Provider**.\n* Add authentication through more traditional **[username/password databases](https://docs.auth0.com/mysql-connection-tutorial)**.\n* Add support for **[linking different user accounts](https://docs.auth0.com/link-accounts)** with the same user.\n* Support for generating signed [Json Web Tokens](https://docs.auth0.com/jwt) to call your APIs and **flow the user identity** securely.\n* Analytics of how, when and where users are logging in.\n* Pull data from other sources and add it to the user profile, through [JavaScript rules](https://docs.auth0.com/rules).\n\n## Create a free account in Auth0\n\n1. Go to [Auth0](https://auth0.com) and click Sign Up.\n2. Use Google, GitHub or Microsoft Account to login.\n\n## Author\n\n[Auth0](https://auth0.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
  "readmeFilename": "README.md",
  "_id": "angular-jwt@0.1.8",
  "_from": "angular-jwt@0.1.8"
}
